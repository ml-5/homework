/*1朴素并查集：

    int p[N]; //存储每个点的祖宗节点

    // 返回x的祖宗节点
    int find(int x)
    {
        if (p[x] != x) p[x] = find(p[x]);
        return p[x];
    }

    // 初始化，假定节点编号是1~n
    for (int i = 1; i <= n; i ++ ) p[i] = i;

    // 合并a和b所在的两个集合：
    p[find(a)] = find(b);


(2)维护size的并查集：

    int p[N], size[N];
    //p[]存储每个点的祖宗节点, size[]只有祖宗节点的有意义，表示祖宗节点所在集合中的点的数量

    // 返回x的祖宗节点
    int find(int x)
    {
        if (p[x] != x) p[x] = find(p[x]);
        return p[x];
    }

    // 初始化，假定节点编号是1~n
    for (int i = 1; i <= n; i ++ )
    {
        p[i] = i;
        size[i] = 1;
    }

    // 合并a和b所在的两个集合：
    size[find(b)] += size[find(a)];
    p[find(a)] = find(b);


(3)维护到祖宗节点距离的并查集：

    int p[N], d[N];
    //p[]存储每个点的祖宗节点, d[x]存储x到p[x]的距离

    // 返回x的祖宗节点
    int find(int x)
    {
        if (p[x] != x)
        {
            int u = find(p[x]);
            d[x] += d[p[x]];
            p[x] = u;
        }
        return p[x];
    }

    // 初始化，假定节点编号是1~n
    for (int i = 1; i <= n; i ++ )
    {
        p[i] = i;
        d[i] = 0;
    }

    // 合并a和b所在的两个集合：
    p[find(a)] = find(b);
    d[find(a)] = distance; // 根据具体问题，初始化find(a)的偏移量*/



/*
1.将两个集合合并
2.查询两个元素是否在一个集合当中
时间复杂度可以优化成近乎O(1)，快速支持两个操作

基本原理：每个集合用树维护，根节点编号就是当前集合编号，对于每一个节点存储其父节点p[i]

问题1 如何判断树根:if(p[x]==x)
问题2 如何求节点x的集合编号:while(p[x]!=x) x=p[x];
注意此处最为耗时，时间复杂度为树的深度，在此处路径优化，将路径上所有点直接指向根节点
也就是每探索一个节点，将这个节点到根节点探索路径上的所有节点指向根节点，
之后对于这一些节点来说，判断其所属集合时间复杂度为O(1) 但因为是部分节点，所以是近乎
也注意此时的while->if 
问题3 如何合并两个集合:p[x]=y 根节点相连
*/


